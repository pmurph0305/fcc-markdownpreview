{"version":3,"sources":["Editor/Editor.js","Preview/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","_ref","markdownText","onChange","react_default","a","createElement","className","htmlFor","id","value","Preview","text","renderer","marked","Renderer","link","href","title","concat","dangerouslySetInnerHTML","newLines","replace","__html","getMarkup","initialExample","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","target","state","src_Editor_Editor","src_Preview_Preview","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAoBeA,eAhBA,SAAAC,GAA8B,IAA5BC,EAA4BD,EAA5BC,aAAcC,EAAcF,EAAdE,SAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAeC,QAAQ,UAAxC,mBAEAJ,EAAAC,EAAAC,cAAA,YACEG,GAAG,SACHF,UAAU,kBACVJ,SAAUA,EACVO,MAAOR,uBCqBAS,SA9BC,SAAAV,GAAY,IAAVW,EAAUX,EAAVW,KAIZC,EAAW,IAAIC,IAAOC,SAC1BF,EAASG,KAAO,SAAUC,EAAMC,EAAON,GACrC,iBAAAO,OAAkBF,EAAlB,qBAAAE,OAA0CP,EAA1C,SAaF,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,UAAUD,UAAU,iBAAnC,oBAGCH,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUF,UAAU,mBAAmBa,wBAZlC,WAGhB,IAAIC,EAAWT,EAAKU,QAAQ,gBAAiB,QAC7C,MAAM,CAACC,OAAQT,IAAOO,EAAU,CAACR,SAAUA,KAQgCW,QCRzEC,EAAc,qsBAkDLC,cAtBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORxB,SAAW,SAACgC,GACVP,EAAKQ,SAAS,CAACxB,KAAMuB,EAAME,OAAO3B,SAPlCkB,EAAKU,MAAQ,CACX1B,KAAMa,GAHSG,wEAajB,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiC,EAAD,CAAQpC,SAAU4B,KAAK5B,SAAUD,aAAc6B,KAAKO,MAAM1B,OAC1DR,EAAAC,EAAAC,cAACkC,EAAD,CAAS5B,KAAMmB,KAAKO,MAAM1B,eArBhB6B,IAAMC,WC/BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e4b55ee2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Editor.css'\r\n\r\n\r\nconst Editor = ({markdownText, onChange}) => {\r\n  return (\r\n    <div className=\"editor-container\">\r\n      <label className=\"editor-label\" htmlFor=\"editor\">Markdown Editor</label>\r\n      {/* User Story #1: I can see a textarea element with a corresponding id=\"editor\". */}\r\n      <textarea \r\n        id=\"editor\" \r\n        className=\"editor-textarea\" \r\n        onChange={onChange} \r\n        value={markdownText}\r\n      >\r\n      </textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Editor;","import React from 'react';\r\nimport marked from 'marked';\r\nimport \"./Preview.css\"\r\n\r\nconst Preview = ({text}) => {\r\n\r\n  // Optional Bonus (you do not need to make this test pass): When I click a link rendered by my markdown previewer, \r\n  //the link is opened up in a new tab (HINT: read the Marked.js docs for this one!).\r\n  let renderer = new marked.Renderer();\r\n  renderer.link = function (href, title, text) {\r\n    return `<a href=${href} target=\"_blank\">${text}</a>`\r\n  }\r\n\r\n \r\n\r\n  // User Story #4: When I enter GitHub flavored markdown into the #editor element, the text is rendered as HTML in the #preview element as I type \r\n  const getMarkup = () => {\r\n    // Optional Bonus (you do not need to make this test pass): My markdown previewer interprets carriage returns and renders them as br (line break) elements.\r\n    // done by replacing \\r and \\n with \"  \\n\"\r\n    let newLines = text.replace(/\\n|\\r|\\r\\n/gim, \"  \\n\");\r\n    return{__html: marked(newLines, {renderer: renderer})}\r\n  }\r\n\r\n  return (\r\n    <div className=\"preview-container\">\r\n      <label htmlFor=\"preview\" className=\"preview-label\">Markdown Preview</label>\r\n      {/* User Story #2: I can see an element with a corresponding id=\"preview\". */}\r\n  \r\n       <div id=\"preview\" className=\"preview-markdown\" dangerouslySetInnerHTML={getMarkup()}></div>\r\n \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preview;","import React from 'react';\nimport './App.css';\n\nimport Editor from './Editor/Editor';\nimport Preview from './Preview/Preview';\n\n  /* User Story #5: When my markdown previewer first loads, \n  the default text in the #editor field should contain valid markdown that represents \n  at least one of each of the following elements: \n  a header (H1 size), \n  a sub header (H2 size),\n   a link, \n   inline code, \n   a code block, \n   a list item, \n   a blockquote,\n    an image, \n    and bolded text.\n  */\n\nconst initialExample = `# Welcome to the markdown editor!\n  ## Enter markdown in the editor to see the preview below!\n  ### You can do all kinds of headings...\n  You can also *emphasize* or **bold** things with asterisks.  \n  You can put links in: [Like this one to FreeCodeCamp!](https://freecodecamp.org)\n  \\`inline code can also be written\\` between backticks\n  \\`\\`\\`\n  code blocks\n  can also\n  be written here\n   \\`\\`\\`\n  >block quotes can come in handy too.\n\n  1. lists can be made\n  1. with numbers\n\n  or\n  * unordered lists\n  * can be made\n  * with asterisks\n  You could even put images in if you want like this: ![image of a dog](https://i.pinimg.com/originals/4e/ae/65/4eae65b560cfad428d1874af80835451.jpg)\n`;\n\nclass App extends React.Component {\n\n\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: initialExample\n    }\n  }\n\n  // User Story #3: When I enter text into the #editor element, the #preview element is updated as I type to display the content of the textarea.\n  onChange = (event) => {\n    this.setState({text: event.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor onChange={this.onChange} markdownText={this.state.text}/>\n        <Preview text={this.state.text}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}